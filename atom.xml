<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JDD</title>
  <subtitle>Supsercell</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jddjj.github.io/"/>
  <updated>2016-04-23T08:34:08.796Z</updated>
  <id>http://jddjj.github.io/</id>
  
  <author>
    <name>Jidongdong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxJoke:RxJava+MVP的开源项目</title>
    <link href="http://jddjj.github.io/2016/04/23/RxJoke/"/>
    <id>http://jddjj.github.io/2016/04/23/RxJoke/</id>
    <published>2016-04-23T08:27:25.000Z</published>
    <updated>2016-04-23T08:34:08.796Z</updated>
    
    <content type="html">&lt;h1 id=&quot;RxJoke&quot;&gt;&lt;a href=&quot;#RxJoke&quot; class=&quot;headerlink&quot; title=&quot;RxJoke&quot;&gt;&lt;/a&gt;RxJoke&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JDDJJ/RxJoke&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个集成Rxjava,Retrofit,Mvp,以及Dagger2的开源项目&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/rxjoke_ic_launcher.png&quot; alt=&quot;Rxjoke&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近一直在研究和学习，也一直有想做一个开源项目，将消化的知识运用出来，俗话说“纸上得来终觉浅，绝知此事要躬行”，所以就做了这样一个项目，结合了一些开源框架和三方库，比如大家熟知的MVP,Rxjava等，做了一个笑话大全。力争“简约而不简单吧”。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;工程目录&quot;&gt;&lt;a href=&quot;#工程目录&quot; class=&quot;headerlink&quot; title=&quot;工程目录&quot;&gt;&lt;/a&gt;工程目录&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/rxjoke_pro.png&quot; alt=&quot;工程目录&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;整体架构&quot;&gt;&lt;a href=&quot;#整体架构&quot; class=&quot;headerlink&quot; title=&quot;整体架构&quot;&gt;&lt;/a&gt;整体架构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Model-view-presenter，简称MVP，是电脑软件设计工程中一种对针对MVC模式，再审议后所延伸提出的一种软件设计模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一款工程的架构，就相当于骨骼，骨架，只有骨架搭建的好，才能使整个工程富有弹性，并且逻辑清晰。这里我选用的最近比较热的MVP设计模式，并且这款模式也已经运用到我之前的企业项目中，效果卓越。对于MVP,这里推荐几篇文章。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0227/2503.html&quot; title=&quot;Android中的MVP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android中的MVP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guxiao1201/article/details/40147209&quot; title=&quot;Android开发MVP模式解析&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android开发MVP模式解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/vector_yi/article/details/24719873&quot; title=&quot;MVP模式在Android开发中的应用&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVP模式在Android开发中的应用&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;数据源API&quot;&gt;&lt;a href=&quot;#数据源API&quot; class=&quot;headerlink&quot; title=&quot;数据源API&quot;&gt;&lt;/a&gt;数据源API&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://apistore.baidu.com/&quot; title=&quot;API Store,为开发者提供最全面的API服务&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API Store,为开发者提供最全面的API服务&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;巧妇难为无米之炊，做一个项目，数据的来源是很重要的，不论B/S,C/S结构，其中server都是提供数据来源的。而这里我是从&lt;a href=&quot;http://apistore.baidu.com/astore/classificationservicelist.html&quot; title=&quot;百度Api集市&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;百度Api集市&lt;/strong&gt;&lt;/a&gt;搜索的&lt;a href=&quot;http://apistore.baidu.com/apiworks/servicedetail/864.html&quot; title=&quot;笑话大全APi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;笑话大全API&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Api获取数据源（Json数据）&lt;/li&gt;
&lt;li&gt;利用GsonFormat生成Entity即JavaBean&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里由于结合了rxjava,所以model层也就上面获取的javabean,获取数据的代码我放到了presenter层。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;a href=&quot;http://blog.csdn.net/dakaring/article/details/46300963&quot; title=&quot;GsonFormat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;插件GsonFormat快速实现JavaBean&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;获取数据&quot;&gt;&lt;a href=&quot;#获取数据&quot; class=&quot;headerlink&quot; title=&quot;获取数据&quot;&gt;&lt;/a&gt;获取数据&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Retrofit – Java(Android) 的REST 接口封装类库&lt;/p&gt;
&lt;p&gt;RxJava  –  一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取数据方面（Presenter层）我利用了retrofit2+rxjava,之前用过volley框架，okhttp框架，感觉是个有所长，retrofit2给我的感觉就是分层清晰。&lt;br&gt;而rxjava，对于有一定开发经验的程序员来说。还是挺轻松的，并且利用响应式开发，你会发现以前的很多需要回调来回调去的事情变得简单轻松。&lt;br&gt;这里也推几篇文章。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083#toc_5&quot; title=&quot;给 Android 开发者的 RxJava 详解&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解(扔物线)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.itnose.net/detail/6422757.html&quot; title=&quot;RxAndroid和RxJava的资料分享&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxAndroid和RxJava的资料分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/biezhihua/article/details/49232289&quot; title=&quot;好用的网络请求库Retrofit2（入门及讲解）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;好用的网络请求库Retrofit2（入门及讲解）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gank.io/post/56e80c2c677659311bed9841?from=timeline&amp;amp;isappinstalled=0&amp;amp;nsukey=g1D1Y6PMp3BW%2B0%2F%2Butx4StSJxcUCTm4%2BN8T7LnPNCCeQEY1lzm6oKvXdbrlAD4E9T%2FB1quV75jJB7H9zjcRxTQ%3D%3D&quot; title=&quot;RxJava 与 Retrofit 结合的最佳实践&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; RxJava 与 Retrofit 结合的最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tuicool.com/articles/qqMbee&quot; title=&quot;当钢铁侠反应更灵敏-RxJava&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;当钢铁侠反应更灵敏-RxJava&lt;/a&gt;&lt;h2 id=&quot;UI层&quot;&gt;&lt;a href=&quot;#UI层&quot; class=&quot;headerlink&quot; title=&quot;UI层&quot;&gt;&lt;/a&gt;UI层&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;谷歌推出了全新的设计语言Material Design&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;butterknife注解框架的偷懒插件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;UI显示层，利用了已经普及的Material Design中的设计规范，以及一些常用控件，如RecycleView,SwipeRefreshlayout等。完成了上拉加载，下拉刷新等功能，并且利用了butterknife，用来快速注入视图。&lt;br&gt;&lt;img src=&quot;http://img0.tuicool.com/JfQ73eI.gif&quot; alt=&quot;ButterKnife插件使用&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Leakcanary -内存泄露检测工具 LeakCanary 这里提一下，问什么要用这个，首先，工作之后，发现一款应用，不论你代码写的多好，多美，多优雅，都不如给用户带来良好体验更重要，而用户体验一般体现在两点，一是界面美观，二则是操作流畅，也即性能良好，当一个工程越来越大，你会发现，性能问题也就成了重中之重。所以这里推荐一下。当然你会利用MAT监控内存也不错哦。&lt;/li&gt;
&lt;li&gt;Glide 图片加载框架（对比其他如picasso，imageloader更优）&lt;/li&gt;
&lt;li&gt;Dagger2 依赖注入框架&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里着重说一下依赖注入框架Dagger2,这可以说是项目中较难上手的，并且在安卓中优点不明确的一个框架，我曾经花了大量时间去理解并尝试写一篇文章去谈一谈当它运用到实际项目中时，给我们带来的好处，目前也在消化中，发现目前网上大量文章所说的都有一些误区。但是现在我还未将它引入这个项目，当然这里推荐一篇文章&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html&quot; title=&quot;依赖注入那些事儿&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;依赖注入那些事儿&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你进入误区的时候，尝试从其根源出发，会有意想不到的收获，大家先不去了解Dagger2，而是尝试理解依赖注入。&lt;/p&gt;
&lt;p&gt;后期我会将dagger2引入工程。&lt;/p&gt;
&lt;h2 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h2&gt;&lt;p&gt;以上是开源项目RxJoke的一些简介，有希望了解更多的可以Fork一下，未来一段时间我会继续推进项目的进程，优化以及更细。比如缓存框架，热更新框架等等。&lt;/p&gt;
&lt;h2 id=&quot;截图&quot;&gt;&lt;a href=&quot;#截图&quot; class=&quot;headerlink&quot; title=&quot;截图&quot;&gt;&lt;/a&gt;截图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/rxjoke_copyright.png&quot; width=&quot;308&quot; height=&quot;548&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/rxjoke_main.png&quot; width=&quot;308&quot; height=&quot;548&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/rxjoke_icon.png&quot; width=&quot;308&quot; height=&quot;548&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/rxjoke_error.png&quot; width=&quot;308&quot; height=&quot;548&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RxJoke&quot;&gt;&lt;a href=&quot;#RxJoke&quot; class=&quot;headerlink&quot; title=&quot;RxJoke&quot;&gt;&lt;/a&gt;RxJoke&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JDDJJ/RxJoke&quot;&gt;一个集成Rxjava,Retrofit,Mvp,以及Dagger2的开源项目&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/rxjoke_ic_launcher.png&quot; alt=&quot;Rxjoke&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近一直在研究和学习，也一直有想做一个开源项目，将消化的知识运用出来，俗话说“纸上得来终觉浅，绝知此事要躬行”，所以就做了这样一个项目，结合了一些开源框架和三方库，比如大家熟知的MVP,Rxjava等，做了一个笑话大全。力争“简约而不简单吧”。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jddjj.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jddjj.github.io/tags/Android/"/>
    
      <category term="MVP" scheme="http://jddjj.github.io/tags/MVP/"/>
    
      <category term="RxJava" scheme="http://jddjj.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>WhyDagger2</title>
    <link href="http://jddjj.github.io/2016/04/06/WhyDagger2/"/>
    <id>http://jddjj.github.io/2016/04/06/WhyDagger2/</id>
    <published>2016-04-06T12:46:25.000Z</published>
    <updated>2016-04-23T08:32:35.640Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;两利相权取其重，两弊相衡取其轻&lt;/em&gt;&lt;br&gt;&lt;em&gt;——古语&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt; 　　权衡利弊，从善而为。我们在抉择一件事情之前，都需要去因地制宜。凡是不能太过武断，亦不能太拖沓。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;　　最近一直在学习研究Dagger2,不单单因为其上手较难，更因为对他好处的模糊理解。导致最近虽然已经掌握框架的搭建，但是仍然未引入工程。并且对比rxjava,rxAndroid,mvp这些三方库和框架，你会发现它受众面好像并不大，真正的引入到自己工程的也并不多。最近的探究，总算摸清了点眉目。&lt;/p&gt;
&lt;p&gt;注：这篇文章比较适合已经对依赖注入和dagger2有一定了解的同学借鉴。重要的事情说一遍。&lt;/p&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;　　在开篇之前，我这里先列举一个问题，也是我之前的困惑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网上开了不少dagger2的教程，其中总会举出几个例子，解耦是我们常常看到的，依赖注入的概念也应该明白一些，dagger2其实就是将我们平常需要new（实例化）的过程，提取出来，这样就能解耦了。&lt;br&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_14b5545b90102w139.html&quot; title=&quot;例子来源&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sina.com.cn/s/blog_14b5545b90102w139.html&lt;/a&gt;&lt;br&gt;比如说这篇博客就介绍了一个很简单的例子，他开头就说了这么一句“一旦我们的UserModel的创建方式发生了改变（比如需要传入Context对象到构造函数），我们就需要修改所有创建UserModel的代码”但是我发现 用了依赖注入之后，仍旧得修改所有创建User Model的代码。为什么？因为你的参数是肯定不可能是无米之炊，必须有来源。那用了dagger2后，仍然需要修改每个注入的目标类，传递参数，并且还要搭建框架，有必要么？这不是更能加繁琐么？下面我们保留这个问题，看正文。&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;从依赖注入谈起&quot;&gt;&lt;a href=&quot;#从依赖注入谈起&quot; class=&quot;headerlink&quot; title=&quot;从依赖注入谈起&quot;&gt;&lt;/a&gt;从依赖注入谈起&lt;/h2&gt;存在即合理，我怀疑是不是我进入某个误区了。那我就希望能走出误区，或者说是看看到底它的好处是什么？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里我就抛开所谓的dagger2，我们从依赖注入的好处去看。什么是依赖注入，网络上有许多定义，或长或短，而我教推崇这篇文章里的讲解&lt;a href=&quot;http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html&quot; title=&quot;依赖注入那些事&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html&lt;/a&gt;&lt;br&gt;依赖注入（Dependency Injection），是这样一个过程：由于某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。（这里的客户类，服务类就是经常看到的A中实例化了B,A就依赖于B,A就是客户，B就是服务）&lt;br&gt;这样就解决了“客户类不准实例化具体服务类”和“客户类需要具体服务类”这样一对矛盾。&lt;/p&gt;
&lt;h2 id=&quot;后语&quot;&gt;&lt;a href=&quot;#后语&quot; class=&quot;headerlink&quot; title=&quot;后语&quot;&gt;&lt;/a&gt;后语&lt;/h2&gt;&lt;p&gt;抄录古诗一首，愿大家在这个春天里保持好的心情，身体健康。&lt;/p&gt;
&lt;center&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;钱塘湖春行&lt;br&gt;白居易&lt;br&gt;孤山寺北贾亭西，水面初平云脚低。&lt;br&gt;几处早莺争暖树，谁家新燕啄春泥。&lt;br&gt;乱花渐欲迷人眼，浅草才能没马蹄。&lt;br&gt;最爱湖东行不足，绿杨阴里白沙堤。&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/center&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;两利相权取其重，两弊相衡取其轻&lt;/em&gt;&lt;br&gt;&lt;em&gt;——古语&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt; 　　权衡利弊，从善而为。我们在抉择一件事情之前，都需要去因地制宜。凡是不能太过武断，亦不能太拖沓。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jddjj.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jddjj.github.io/tags/Android/"/>
    
      <category term="Dagger2" scheme="http://jddjj.github.io/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>浅谈回调接口</title>
    <link href="http://jddjj.github.io/2016/03/31/callback/"/>
    <id>http://jddjj.github.io/2016/03/31/callback/</id>
    <published>2016-03-31T12:46:25.000Z</published>
    <updated>2016-04-01T05:38:51.504Z</updated>
    
    <content type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;  有需求，才会去创造。&lt;br&gt;  网络上有许多关于接口回调的文章，各有千秋，理解角度也分别不同。今天本人希望从需求角度，能让一些对于接口回调不了解，或者概念模糊的人理解一下。本来是想写一下回调的概念。但是我发现这样不利于理解，所以这里我就不赘述概念了，大家看这篇博文也不要带着固定的思维去理解，希望大家举一反三吧。这里我从一个需求的角度让大家理解一下回调的逻辑流程。&lt;/p&gt;
&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;  java中接口回调随处可见，比如说各种监听，onClickListener，而最近比较热的Mvp框架，其中view层抽象接口，也属于接口回调，掌握他，你会发现，逻辑世界还是很神奇的。&lt;br&gt;                                                                              &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;多线程之间数据同步问题&lt;br&gt; 更具象的说法，举个例子，我前段日子有个需求，我需要处理一些字段，但是这些字段里有一个值是北京时间，而北京时间是需要异步获取，这样我希望的就是获取到北京时间后，再处理。这里我就用了接口回调。   （ps:这里我将需求尽可能的简化，只是为了让大家理解回调流程，详细的需求是加密验证，这里就不详述了！否则有点本末倒置。）&lt;h1 id=&quot;流程示范&quot;&gt;&lt;a href=&quot;#流程示范&quot; class=&quot;headerlink&quot; title=&quot;流程示范&quot;&gt;&lt;/a&gt;流程示范&lt;/h1&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;编写功能模块&quot;&gt;&lt;a href=&quot;#编写功能模块&quot; class=&quot;headerlink&quot; title=&quot;编写功能模块&quot;&gt;&lt;/a&gt;编写功能模块&lt;/h2&gt;&lt;p&gt;&lt;code&gt;功能类A&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.dong.test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @author JDD 这是一个功能类 假设他用来处理一些字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ManageFields &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 用来处理字段的方法，而其中有一个字段是北京时间，需要开启异步线程获取时间后再进行一些逻辑处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void doSomething(String string) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//这里我需要获取北京时间，处理的话比如说拼接一段字段在北京时间前面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 str = string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//现在要获取北京时间，这个就是开启一个异步线程去获取，现在问题来了怎么获取它得到的异步时间并拼接起来的。这里就用到了回调&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		TimeUtil timeUtil = new TimeUtil();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		timeUtil.getBjTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;功能类B&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.dong.test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.net.MalformedURLException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.net.URL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.net.URLConnection;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.util.Date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @author JDD 这个是个时间类 需要获取北京时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class TimeUtil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 开启异步线程去获取时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void getBjTime() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		new Thread(new Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				URL url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					url = new URL(&amp;quot;http://www.baidu.com&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					URLConnection uc = url.openConnection();// 生成连接对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					uc.connect(); // 发出连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					long ld = uc.getDate(); // 取得网站日期时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Date date = new Date(ld); // 转换为标准时间对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// 分别取得时间中的小时，分钟和秒，并输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					long bjTime = date.getTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125; catch (MalformedURLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125; // 取得资源对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So 问题来了，该怎将获取的时间同步给A呢？这里大家可以发散一下思维，onclick事件，触发机制，也就是回调机制，它是完成点击(获取到时间后)，执行回调函数 onClick(view v)(执行处理操作)。那这里我们将回调时间抽象成接口。&lt;/p&gt;
&lt;h2 id=&quot;编写接口&quot;&gt;&lt;a href=&quot;#编写接口&quot; class=&quot;headerlink&quot; title=&quot;编写接口&quot;&gt;&lt;/a&gt;编写接口&lt;/h2&gt;&lt;p&gt;调时间抽象成接口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;抽象接口&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.dong.test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @author JDD 时间回调接口 或者说就是监听时间获取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public interface TimeListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//抽象方法，其中参数 就是获取到的时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	void returnTime(long bjTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;改造模块实现回调&quot;&gt;&lt;a href=&quot;#改造模块实现回调&quot; class=&quot;headerlink&quot; title=&quot;改造模块实现回调&quot;&gt;&lt;/a&gt;改造模块实现回调&lt;/h2&gt;&lt;p&gt;首先时间获取模块B中应该有一个实现了TimeListener对象的引用，这里我们去重载一下其构造函数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.dong.test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.net.MalformedURLException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.net.URL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.net.URLConnection;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.util.Date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @author JDD 这个是个时间类 需要获取北京时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class TimeUtil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TimeListener timeListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 这个是实现了TimeListener的对象的引用（其实就是ManageFileds的引用，这样就需要ManageFields类去实现接口）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * @param timeListener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public TimeUtil(TimeListener timeListener)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.timeListener=timeListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 开启异步线程去获取时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public  void getBjTime() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		new Thread(new Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				URL url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					url = new URL(&amp;quot;http://www.baidu.com&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					URLConnection uc = url.openConnection();// 生成连接对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					uc.connect(); // 发出连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					long ld = uc.getDate(); // 取得网站日期时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Date date = new Date(ld); // 转换为标准时间对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// 分别取得时间中的小时，分钟和秒，并输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					long bjTime = date.getTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					//调用管理时间的接口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					timeListener.returnTime(bjTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125; catch (MalformedURLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125; // 取得资源对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;管理字段的类就需要实现 TimeListener接口&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.dong.test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @author JDD 这是一个功能类 假设他用来处理一些字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ManageFields implements TimeListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 用来处理字段的方法，而其中有一个字段是北京时间，需要开启异步线程获取时间后再进行一些逻辑处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void doSomething(String string) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 这里我需要获取北京时间，处理的话比如说拼接一段字段在北京时间前面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 str = string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 现在要获取北京时间，这个就是开启一个异步线程去获取，并将this，也就是自己的引用传过去&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		TimeUtil timeUtil = new TimeUtil(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		timeUtil.getBjTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 这里就是当异步线程获取到数据，调用timeListener.returnTime(bjTime)时，所回调的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void returnTime(long bjTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// TODO Auto-generated method stub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(str+bjTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试代码&quot;&gt;&lt;a href=&quot;#测试代码&quot; class=&quot;headerlink&quot; title=&quot;测试代码&quot;&gt;&lt;/a&gt;测试代码&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.dong.test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class TestCallBack &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// TODO Auto-generated method stub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ManageFields manageFields1=new ManageFields();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ManageFields manageFields2=new ManageFields();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		manageFields1.doSomething(&amp;quot;现在北京时间是：&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		manageFields2.doSomething(&amp;quot;Now BeiJingTime is：&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;p&gt;Now BeiJingTime is：1459396779000&lt;br&gt;现在北京时间是：1459396780000&lt;/p&gt;
&lt;h2 id=&quot;流程图&quot;&gt;&lt;a href=&quot;#流程图&quot; class=&quot;headerlink&quot; title=&quot;流程图&quot;&gt;&lt;/a&gt;流程图&lt;/h2&gt;&lt;p&gt;下面你有个大概思路了，我们看一下流程图（viso制作）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/callback1.png&quot; alt=&quot;流程图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;拓展&quot;&gt;&lt;a href=&quot;#拓展&quot; class=&quot;headerlink&quot; title=&quot;拓展&quot;&gt;&lt;/a&gt;拓展&lt;/h2&gt;&lt;p&gt;当然 管理字段类还可以写成大家熟知的匿名内部类形式&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.dong.test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @author JDD 这是一个功能类 假设他用来处理一些字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ManageFields implements TimeListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//匿名内部类实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void doSomething(String string) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 这里我需要获取北京时间，处理的话比如说拼接一段字段在北京时间前面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 str = string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 现在要获取北京时间，这个就是开启一个异步线程去获取，并将this，也就是自己的引用传过去&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		TimeUtil timeUtil = new TimeUtil(new TimeListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			public void returnTime(long bjTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// TODO Auto-generated method stub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				System.out.println(str+bjTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		timeUtil.getBjTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h2&gt;&lt;p&gt;当然，你要是了解Rxjava,或者观察者模式，抑或hanlder等,都是可以实现这种需求的，但是，总有一种场景，有一种工具更配的来。就跟工具箱里的扳手一样，你有很多扳手，但是也有不同的螺丝，匹配的来的工具不是更给力么！&lt;br&gt;然而回调有时候不是必须的，因为有一个问题就是callbackhell-回调地狱，我的认知就是由于各种回调嵌套，导致工程可读性，可塑性差。所以大家也要两面性的看带问题！&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://7xsffo.com1.z0.glb.clouddn.com/TestCallBack.rar&quot; title=&quot;接口回调样例源码&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;接口回调样例源码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;  有需求，才会去创造。&lt;br&gt;  网络上有许多关于接口回调的文章，各有千秋，理解角度也分别不同。今天本人希望从需求角度，能让一些对于接口回调不了解，或者概念模糊的人理解一下。本来是想写一下回调的概念。但是我发现这样不利于理解，所以这里我就不赘述概念了，大家看这篇博文也不要带着固定的思维去理解，希望大家举一反三吧。这里我从一个需求的角度让大家理解一下回调的逻辑流程。&lt;/p&gt;
&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;  java中接口回调随处可见，比如说各种监听，onClickListener，而最近比较热的Mvp框架，其中view层抽象接口，也属于接口回调，掌握他，你会发现，逻辑世界还是很神奇的。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jddjj.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jddjj.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>InstantRun那些事</title>
    <link href="http://jddjj.github.io/2016/03/01/InstantRun%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://jddjj.github.io/2016/03/01/InstantRun那些事/</id>
    <published>2016-03-01T12:46:25.000Z</published>
    <updated>2016-04-23T08:31:53.851Z</updated>
    
    <content type="html">&lt;p&gt;　　刚入门的Android学员，现在应该还在玩转Eclipse，虽然现在大部分开发人员已经手持Android Studio ,但人们对新事物的接受总是需要缓冲的，并且有的人“恋旧”，并不是说不好，但是在技术更新迭代这么快的时代，不一定好，尝试总是没错的，你可以不做第一个吃螃蟹的人，但是有好多人说，螃蟹是美味的，那你就应该试试了。Android系统是由谷歌研发并维护，而作为谷歌推出的Android Studio 是自己个儿的亲儿子，广大开发人员不用去担心它的更新迭代是否被放弃。而现在的Android Studio已经进入2.0.0-beta6 版本，稳定性和扩展性已经非常强大，玩过Eclipse的都知道，经常会碰到缺少一些sdk的时候，这个时候我们就需要打开SDK Manager 去下载，这个界面大家一定很熟悉&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/instantrun1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;  &lt;center&gt;&lt;strong&gt;&lt;em&gt;SDK Manager&lt;/em&gt;&lt;/strong&gt;&lt;/center&gt;&lt;br&gt;               &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;，但是你有没有为下载过慢烦恼过，又找不到好的翻墙技巧，还有就是插件更新，经常需要去网络上下载离线包，查看各种教程去安装，还有用惯了Android Studio 感觉Eclipse界面好丑。这里并不是去贬低Eclipse，存在即合理，强大的扩展性和开源性，使其仍是开发Jsp，封装cocos2dx等得不可或缺的工具。并且现在仍有一些长久的项目，是eclipse开发的，应为项目过大并且已经成熟，并不适合迁移至Android Studio。      但是，对于以后从事Android开发，和新入门的同学，掌握Android Studio吧！你不会后悔的！说到这里，给大家附上一个链接，最新版本的Android开发相关工具都可以去这里下&lt;a href=&quot;http://www.androiddevtools.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDevTools&lt;/a&gt;;配置Android Studio方面就不进行赘述了，大家下载完可以去网上搜索很多好玩的插件，ButterKnife,CodeGlance,LifeSorter等等有助于编码的插件&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/instantrun6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;strong&gt;&lt;em&gt;Android Studio Plugins&lt;/em&gt;&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;　　下面就是重点讲解下2.0版本一来，卖点最热的Instant Run，Instant Run 其实跟现如今流行的“HotFix”——热更新很像，它能实现让我们不需要重启App就能更新我们的修改，你是否还在为为了研究某个界面，改动之后必须重新运行，然后手动一个个跳转到你的研究界面上而不耐烦的等待呢？试试Instant Run吧！2.0.0从preview1到9 我都试过，更新版本之快基本隔三四天就是一个，直到现在比较稳定的2.0.0-beta6版本。期间经历过用Instant Run编译上一个版本构建的工程都报错的问题，经历过xml不提示双引号的bug,挺过来了，现在Instant Run下运行的状态&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/instantrun2.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;


&lt;p&gt;　　这个闪电符号就是我们开发效率提升的保证了，并且那个瓢虫样子的图标（Debug模式）也可以Instant Run。         我们要用Instant Run，首先要配置你的工程gradle plugin至2.0以后对应的版本，打开对应的ModuleSetting，将对应的配置设置到最新即可，如图&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/instantrun5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;strong&gt;&lt;em&gt;配置&lt;/em&gt;&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;还有就是启用Instant Run 打开Setting&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/instantrun4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;　　　　　　　　　　　　　　　&lt;center&gt;&lt;strong&gt;&lt;em&gt;配置&lt;/em&gt;&lt;/strong&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;　　好了，大功告成，你可以创建新的应用，或者直接按上述配置，配置好你曾经的应用，这样可以进行Instant Run了，比如说你改变了布局上的文字，直接再次点击闪电小图标，log控制台输出如下，说明你运行成功了，看看你的应用，没有重启吧，它只更新了当前Activity&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/instantrun3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;　　　　　　　　　　　　　&lt;center&gt;&lt;strong&gt;&lt;em&gt;log控制台输出&lt;/em&gt;&lt;/strong&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt; 　　但是还有一些情况是不能支持Instant Run的，比如说AndroidManifest文件更改，R文件更改，添加了新的资源文件等等，但是你会发现，2.0版本仍然比以前运行快很多。所以不要注意这些细节，快来玩转吧。ps:有时候，由于项目过大，可能某些三方或者构建方面的修改导致不能运行Instant Run，比如我上次运用retrolambda,就不能在用Instant Run 了，但发现虽然需要重新启动应用程序，仍然很快，也就没有去调试是哪里的问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　刚入门的Android学员，现在应该还在玩转Eclipse，虽然现在大部分开发人员已经手持Android Studio ,但人们对新事物的接受总是需要缓冲的，并且有的人“恋旧”，并不是说不好，但是在技术更新迭代这么快的时代，不一定好，尝试总是没错的，你可以不做第一个吃螃蟹的人，但是有好多人说，螃蟹是美味的，那你就应该试试了。Android系统是由谷歌研发并维护，而作为谷歌推出的Android Studio 是自己个儿的亲儿子，广大开发人员不用去担心它的更新迭代是否被放弃。而现在的Android Studio已经进入2.0.0-beta6 版本，稳定性和扩展性已经非常强大，玩过Eclipse的都知道，经常会碰到缺少一些sdk的时候，这个时候我们就需要打开SDK Manager 去下载，这个界面大家一定很熟悉&lt;br&gt;&lt;img src=&quot;http://7xsffo.com1.z0.glb.clouddn.com/instantrun1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;  &lt;center&gt;&lt;strong&gt;&lt;em&gt;SDK Manager&lt;/em&gt;&lt;/strong&gt;&lt;/center&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="AndroidDevTools" scheme="http://jddjj.github.io/tags/AndroidDevTools/"/>
    
  </entry>
  
</feed>
